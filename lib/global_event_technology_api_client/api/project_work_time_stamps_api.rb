=begin
#Project API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.49
=end

module GlobalEventTechnologyApiClient
  class ProjectWorkTimeStampsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :_next 
    # @return [ArrayResultOfWorkTimeStampModel]
    def project_work_time_stamps_get_all(project_id, opts = {})
      data, _status_code, _headers = project_work_time_stamps_get_all_with_http_info(project_id, opts)
      data
    end

    # @param project_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :_next 
    # @return [Array<(ArrayResultOfWorkTimeStampModel, Integer, Hash)>] ArrayResultOfWorkTimeStampModel data, response status code and response headers
    def project_work_time_stamps_get_all_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectWorkTimeStampsApi.project_work_time_stamps_get_all ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectWorkTimeStampsApi.project_work_time_stamps_get_all"
      end
      # resource path
      local_var_path = '/projects/{projectId}/work-time-stamps'.sub('{' + 'projectId' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'next'] = opts[:'_next'] if !opts[:'_next'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ArrayResultOfWorkTimeStampModel' 

      auth_names = opts[:auth_names] || ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectWorkTimeStampsApi#project_work_time_stamps_get_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param project_id 
    # @param work_time_stamp_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :_next 
    # @return [WorkTimeStampModel]
    def project_work_time_stamps_get_by_id(project_id, work_time_stamp_id, opts = {})
      data, _status_code, _headers = project_work_time_stamps_get_by_id_with_http_info(project_id, work_time_stamp_id, opts)
      data
    end

    # @param project_id 
    # @param work_time_stamp_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :_next 
    # @return [Array<(WorkTimeStampModel, Integer, Hash)>] WorkTimeStampModel data, response status code and response headers
    def project_work_time_stamps_get_by_id_with_http_info(project_id, work_time_stamp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectWorkTimeStampsApi.project_work_time_stamps_get_by_id ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectWorkTimeStampsApi.project_work_time_stamps_get_by_id"
      end
      # verify the required parameter 'work_time_stamp_id' is set
      if @api_client.config.client_side_validation && work_time_stamp_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_time_stamp_id' when calling ProjectWorkTimeStampsApi.project_work_time_stamps_get_by_id"
      end
      # resource path
      local_var_path = '/projects/{projectId}/work-time-stamps/{workTimeStampId}'.sub('{' + 'projectId' + '}', project_id.to_s).sub('{' + 'workTimeStampId' + '}', work_time_stamp_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'next'] = opts[:'_next'] if !opts[:'_next'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'WorkTimeStampModel' 

      auth_names = opts[:auth_names] || ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectWorkTimeStampsApi#project_work_time_stamps_get_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
