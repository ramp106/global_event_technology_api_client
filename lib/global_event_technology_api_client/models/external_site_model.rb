=begin
#Project API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module GlobalEventTechnologyApiClient
  class ExternalSiteModel
    attr_accessor :unit_id

    attr_accessor :name

    attr_accessor :archived

    attr_accessor :type

    attr_accessor :enable_pos_targets

    attr_accessor :menu_id

    attr_accessor :ac_area_id

    attr_accessor :ac_area_exit_id

    attr_accessor :menu_item_id

    attr_accessor :enable_payout

    attr_accessor :tickets_use_cart

    attr_accessor :tickets_cart_max_size

    attr_accessor :tickets_allow_barcode_by_keyboard

    attr_accessor :ticket_site_mapping_label_config

    attr_accessor :tickets_swap_to_chip

    attr_accessor :tickets_allow_search

    attr_accessor :tickets_emit_access_check

    attr_accessor :ac_check_sell_product

    attr_accessor :ac_check_use_turnstyle

    attr_accessor :self_service_card_payment_type_id

    attr_accessor :self_service_cash_payment_type_id

    attr_accessor :self_service_cashless_payment_type_id

    attr_accessor :payment_type_ids

    attr_accessor :chip_ids

    attr_accessor :tip_config_id

    attr_accessor :enable_master_barcodes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'unit_id' => :'unitId',
        :'name' => :'name',
        :'archived' => :'archived',
        :'type' => :'type',
        :'enable_pos_targets' => :'enablePosTargets',
        :'menu_id' => :'menuId',
        :'ac_area_id' => :'acAreaId',
        :'ac_area_exit_id' => :'acAreaExitId',
        :'menu_item_id' => :'menuItemId',
        :'enable_payout' => :'enablePayout',
        :'tickets_use_cart' => :'ticketsUseCart',
        :'tickets_cart_max_size' => :'ticketsCartMaxSize',
        :'tickets_allow_barcode_by_keyboard' => :'ticketsAllowBarcodeByKeyboard',
        :'ticket_site_mapping_label_config' => :'ticketSiteMappingLabelConfig',
        :'tickets_swap_to_chip' => :'ticketsSwapToChip',
        :'tickets_allow_search' => :'ticketsAllowSearch',
        :'tickets_emit_access_check' => :'ticketsEmitAccessCheck',
        :'ac_check_sell_product' => :'acCheckSellProduct',
        :'ac_check_use_turnstyle' => :'acCheckUseTurnstyle',
        :'self_service_card_payment_type_id' => :'selfServiceCardPaymentTypeId',
        :'self_service_cash_payment_type_id' => :'selfServiceCashPaymentTypeId',
        :'self_service_cashless_payment_type_id' => :'selfServiceCashlessPaymentTypeId',
        :'payment_type_ids' => :'paymentTypeIds',
        :'chip_ids' => :'chipIds',
        :'tip_config_id' => :'tipConfigId',
        :'enable_master_barcodes' => :'enableMasterBarcodes'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'unit_id' => :'Object',
        :'name' => :'Object',
        :'archived' => :'Object',
        :'type' => :'Object',
        :'enable_pos_targets' => :'Object',
        :'menu_id' => :'Object',
        :'ac_area_id' => :'Object',
        :'ac_area_exit_id' => :'Object',
        :'menu_item_id' => :'Object',
        :'enable_payout' => :'Object',
        :'tickets_use_cart' => :'Object',
        :'tickets_cart_max_size' => :'Object',
        :'tickets_allow_barcode_by_keyboard' => :'Object',
        :'ticket_site_mapping_label_config' => :'Object',
        :'tickets_swap_to_chip' => :'Object',
        :'tickets_allow_search' => :'Object',
        :'tickets_emit_access_check' => :'Object',
        :'ac_check_sell_product' => :'Object',
        :'ac_check_use_turnstyle' => :'Object',
        :'self_service_card_payment_type_id' => :'Object',
        :'self_service_cash_payment_type_id' => :'Object',
        :'self_service_cashless_payment_type_id' => :'Object',
        :'payment_type_ids' => :'Object',
        :'chip_ids' => :'Object',
        :'tip_config_id' => :'Object',
        :'enable_master_barcodes' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GlobalEventTechnologyApiClient::ExternalSiteModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GlobalEventTechnologyApiClient::ExternalSiteModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'unit_id')
        self.unit_id = attributes[:'unit_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'enable_pos_targets')
        self.enable_pos_targets = attributes[:'enable_pos_targets']
      end

      if attributes.key?(:'menu_id')
        self.menu_id = attributes[:'menu_id']
      end

      if attributes.key?(:'ac_area_id')
        self.ac_area_id = attributes[:'ac_area_id']
      end

      if attributes.key?(:'ac_area_exit_id')
        self.ac_area_exit_id = attributes[:'ac_area_exit_id']
      end

      if attributes.key?(:'menu_item_id')
        self.menu_item_id = attributes[:'menu_item_id']
      end

      if attributes.key?(:'enable_payout')
        self.enable_payout = attributes[:'enable_payout']
      end

      if attributes.key?(:'tickets_use_cart')
        self.tickets_use_cart = attributes[:'tickets_use_cart']
      end

      if attributes.key?(:'tickets_cart_max_size')
        self.tickets_cart_max_size = attributes[:'tickets_cart_max_size']
      end

      if attributes.key?(:'tickets_allow_barcode_by_keyboard')
        self.tickets_allow_barcode_by_keyboard = attributes[:'tickets_allow_barcode_by_keyboard']
      end

      if attributes.key?(:'ticket_site_mapping_label_config')
        self.ticket_site_mapping_label_config = attributes[:'ticket_site_mapping_label_config']
      end

      if attributes.key?(:'tickets_swap_to_chip')
        self.tickets_swap_to_chip = attributes[:'tickets_swap_to_chip']
      end

      if attributes.key?(:'tickets_allow_search')
        self.tickets_allow_search = attributes[:'tickets_allow_search']
      end

      if attributes.key?(:'tickets_emit_access_check')
        self.tickets_emit_access_check = attributes[:'tickets_emit_access_check']
      end

      if attributes.key?(:'ac_check_sell_product')
        self.ac_check_sell_product = attributes[:'ac_check_sell_product']
      end

      if attributes.key?(:'ac_check_use_turnstyle')
        self.ac_check_use_turnstyle = attributes[:'ac_check_use_turnstyle']
      end

      if attributes.key?(:'self_service_card_payment_type_id')
        self.self_service_card_payment_type_id = attributes[:'self_service_card_payment_type_id']
      end

      if attributes.key?(:'self_service_cash_payment_type_id')
        self.self_service_cash_payment_type_id = attributes[:'self_service_cash_payment_type_id']
      end

      if attributes.key?(:'self_service_cashless_payment_type_id')
        self.self_service_cashless_payment_type_id = attributes[:'self_service_cashless_payment_type_id']
      end

      if attributes.key?(:'payment_type_ids')
        if (value = attributes[:'payment_type_ids']).is_a?(Array)
          self.payment_type_ids = value
        end
      end

      if attributes.key?(:'chip_ids')
        if (value = attributes[:'chip_ids']).is_a?(Array)
          self.chip_ids = value
        end
      end

      if attributes.key?(:'tip_config_id')
        self.tip_config_id = attributes[:'tip_config_id']
      end

      if attributes.key?(:'enable_master_barcodes')
        self.enable_master_barcodes = attributes[:'enable_master_barcodes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @unit_id.nil?
        invalid_properties.push('invalid value for "unit_id", unit_id cannot be nil.')
      end

      if @archived.nil?
        invalid_properties.push('invalid value for "archived", archived cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @unit_id.nil?
      return false if @archived.nil?
      return false if @type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          unit_id == o.unit_id &&
          name == o.name &&
          archived == o.archived &&
          type == o.type &&
          enable_pos_targets == o.enable_pos_targets &&
          menu_id == o.menu_id &&
          ac_area_id == o.ac_area_id &&
          ac_area_exit_id == o.ac_area_exit_id &&
          menu_item_id == o.menu_item_id &&
          enable_payout == o.enable_payout &&
          tickets_use_cart == o.tickets_use_cart &&
          tickets_cart_max_size == o.tickets_cart_max_size &&
          tickets_allow_barcode_by_keyboard == o.tickets_allow_barcode_by_keyboard &&
          ticket_site_mapping_label_config == o.ticket_site_mapping_label_config &&
          tickets_swap_to_chip == o.tickets_swap_to_chip &&
          tickets_allow_search == o.tickets_allow_search &&
          tickets_emit_access_check == o.tickets_emit_access_check &&
          ac_check_sell_product == o.ac_check_sell_product &&
          ac_check_use_turnstyle == o.ac_check_use_turnstyle &&
          self_service_card_payment_type_id == o.self_service_card_payment_type_id &&
          self_service_cash_payment_type_id == o.self_service_cash_payment_type_id &&
          self_service_cashless_payment_type_id == o.self_service_cashless_payment_type_id &&
          payment_type_ids == o.payment_type_ids &&
          chip_ids == o.chip_ids &&
          tip_config_id == o.tip_config_id &&
          enable_master_barcodes == o.enable_master_barcodes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [unit_id, name, archived, type, enable_pos_targets, menu_id, ac_area_id, ac_area_exit_id, menu_item_id, enable_payout, tickets_use_cart, tickets_cart_max_size, tickets_allow_barcode_by_keyboard, ticket_site_mapping_label_config, tickets_swap_to_chip, tickets_allow_search, tickets_emit_access_check, ac_check_sell_product, ac_check_use_turnstyle, self_service_card_payment_type_id, self_service_cash_payment_type_id, self_service_cashless_payment_type_id, payment_type_ids, chip_ids, tip_config_id, enable_master_barcodes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GlobalEventTechnologyApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
