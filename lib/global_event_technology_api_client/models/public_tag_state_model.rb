=begin
#Project API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.55
=end

require 'date'

module GlobalEventTechnologyApiClient
  class PublicTagStateModel
    attr_accessor :time_stamp

    attr_accessor :tag_nr

    attr_accessor :session_counter

    attr_accessor :manager_group

    attr_accessor :normal_credits

    attr_accessor :pure_gift_credits

    attr_accessor :pre_gift_credits

    attr_accessor :total_credits

    attr_accessor :credits_for_payout

    attr_accessor :system_flags

    attr_accessor :project_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'time_stamp' => :'timeStamp',
        :'tag_nr' => :'tagNr',
        :'session_counter' => :'sessionCounter',
        :'manager_group' => :'managerGroup',
        :'normal_credits' => :'normalCredits',
        :'pure_gift_credits' => :'pureGiftCredits',
        :'pre_gift_credits' => :'preGiftCredits',
        :'total_credits' => :'totalCredits',
        :'credits_for_payout' => :'creditsForPayout',
        :'system_flags' => :'systemFlags',
        :'project_fields' => :'projectFields'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'time_stamp' => :'Object',
        :'tag_nr' => :'Object',
        :'session_counter' => :'Object',
        :'manager_group' => :'Object',
        :'normal_credits' => :'Object',
        :'pure_gift_credits' => :'Object',
        :'pre_gift_credits' => :'Object',
        :'total_credits' => :'Object',
        :'credits_for_payout' => :'Object',
        :'system_flags' => :'Object',
        :'project_fields' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GlobalEventTechnologyApiClient::PublicTagStateModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GlobalEventTechnologyApiClient::PublicTagStateModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'time_stamp')
        self.time_stamp = attributes[:'time_stamp']
      end

      if attributes.key?(:'tag_nr')
        self.tag_nr = attributes[:'tag_nr']
      end

      if attributes.key?(:'session_counter')
        self.session_counter = attributes[:'session_counter']
      end

      if attributes.key?(:'manager_group')
        self.manager_group = attributes[:'manager_group']
      end

      if attributes.key?(:'normal_credits')
        self.normal_credits = attributes[:'normal_credits']
      end

      if attributes.key?(:'pure_gift_credits')
        self.pure_gift_credits = attributes[:'pure_gift_credits']
      end

      if attributes.key?(:'pre_gift_credits')
        self.pre_gift_credits = attributes[:'pre_gift_credits']
      end

      if attributes.key?(:'total_credits')
        self.total_credits = attributes[:'total_credits']
      end

      if attributes.key?(:'credits_for_payout')
        self.credits_for_payout = attributes[:'credits_for_payout']
      end

      if attributes.key?(:'system_flags')
        self.system_flags = attributes[:'system_flags']
      end

      if attributes.key?(:'project_fields')
        self.project_fields = attributes[:'project_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @time_stamp.nil?
        invalid_properties.push('invalid value for "time_stamp", time_stamp cannot be nil.')
      end

      if @session_counter.nil?
        invalid_properties.push('invalid value for "session_counter", session_counter cannot be nil.')
      end

      if @manager_group.nil?
        invalid_properties.push('invalid value for "manager_group", manager_group cannot be nil.')
      end

      if @normal_credits.nil?
        invalid_properties.push('invalid value for "normal_credits", normal_credits cannot be nil.')
      end

      if @pure_gift_credits.nil?
        invalid_properties.push('invalid value for "pure_gift_credits", pure_gift_credits cannot be nil.')
      end

      if @pre_gift_credits.nil?
        invalid_properties.push('invalid value for "pre_gift_credits", pre_gift_credits cannot be nil.')
      end

      if @total_credits.nil?
        invalid_properties.push('invalid value for "total_credits", total_credits cannot be nil.')
      end

      if @credits_for_payout.nil?
        invalid_properties.push('invalid value for "credits_for_payout", credits_for_payout cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @time_stamp.nil?
      return false if @session_counter.nil?
      return false if @manager_group.nil?
      return false if @normal_credits.nil?
      return false if @pure_gift_credits.nil?
      return false if @pre_gift_credits.nil?
      return false if @total_credits.nil?
      return false if @credits_for_payout.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          time_stamp == o.time_stamp &&
          tag_nr == o.tag_nr &&
          session_counter == o.session_counter &&
          manager_group == o.manager_group &&
          normal_credits == o.normal_credits &&
          pure_gift_credits == o.pure_gift_credits &&
          pre_gift_credits == o.pre_gift_credits &&
          total_credits == o.total_credits &&
          credits_for_payout == o.credits_for_payout &&
          system_flags == o.system_flags &&
          project_fields == o.project_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [time_stamp, tag_nr, session_counter, manager_group, normal_credits, pure_gift_credits, pre_gift_credits, total_credits, credits_for_payout, system_flags, project_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        GlobalEventTechnologyApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
