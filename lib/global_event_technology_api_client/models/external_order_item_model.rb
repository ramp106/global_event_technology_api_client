=begin
#Project API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module GlobalEventTechnologyApiClient
  class ExternalOrderItemModel
    attr_accessor :count

    attr_accessor :source_type

    attr_accessor :product_id

    attr_accessor :name

    attr_accessor :accounting_category_id

    attr_accessor :tax_rate_id

    attr_accessor :real_credits

    attr_accessor :gift_credits

    attr_accessor :currency_value

    attr_accessor :enable_field_query

    attr_accessor :field_query

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'count' => :'count',
        :'source_type' => :'sourceType',
        :'product_id' => :'productId',
        :'name' => :'name',
        :'accounting_category_id' => :'accountingCategoryId',
        :'tax_rate_id' => :'taxRateId',
        :'real_credits' => :'realCredits',
        :'gift_credits' => :'giftCredits',
        :'currency_value' => :'currencyValue',
        :'enable_field_query' => :'enableFieldQuery',
        :'field_query' => :'fieldQuery'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'count' => :'Integer',
        :'source_type' => :'ExternalOrderItemSourceTypeEnumModel',
        :'product_id' => :'String',
        :'name' => :'String',
        :'accounting_category_id' => :'String',
        :'tax_rate_id' => :'String',
        :'real_credits' => :'String',
        :'gift_credits' => :'String',
        :'currency_value' => :'String',
        :'enable_field_query' => :'BOOLEAN',
        :'field_query' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.has_key?(:'sourceType')
        self.source_type = attributes[:'sourceType']
      end

      if attributes.has_key?(:'productId')
        self.product_id = attributes[:'productId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'accountingCategoryId')
        self.accounting_category_id = attributes[:'accountingCategoryId']
      end

      if attributes.has_key?(:'taxRateId')
        self.tax_rate_id = attributes[:'taxRateId']
      end

      if attributes.has_key?(:'realCredits')
        self.real_credits = attributes[:'realCredits']
      end

      if attributes.has_key?(:'giftCredits')
        self.gift_credits = attributes[:'giftCredits']
      end

      if attributes.has_key?(:'currencyValue')
        self.currency_value = attributes[:'currencyValue']
      end

      if attributes.has_key?(:'enableFieldQuery')
        self.enable_field_query = attributes[:'enableFieldQuery']
      end

      if attributes.has_key?(:'fieldQuery')
        self.field_query = attributes[:'fieldQuery']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @count.nil?
        invalid_properties.push('invalid value for "count", count cannot be nil.')
      end

      if @source_type.nil?
        invalid_properties.push('invalid value for "source_type", source_type cannot be nil.')
      end

      if @enable_field_query.nil?
        invalid_properties.push('invalid value for "enable_field_query", enable_field_query cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @count.nil?
      return false if @source_type.nil?
      return false if @enable_field_query.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          count == o.count &&
          source_type == o.source_type &&
          product_id == o.product_id &&
          name == o.name &&
          accounting_category_id == o.accounting_category_id &&
          tax_rate_id == o.tax_rate_id &&
          real_credits == o.real_credits &&
          gift_credits == o.gift_credits &&
          currency_value == o.currency_value &&
          enable_field_query == o.enable_field_query &&
          field_query == o.field_query
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [count, source_type, product_id, name, accounting_category_id, tax_rate_id, real_credits, gift_credits, currency_value, enable_field_query, field_query].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = GlobalEventTechnologyApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
