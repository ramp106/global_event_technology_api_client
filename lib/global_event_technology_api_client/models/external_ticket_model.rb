=begin
#Project API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module GlobalEventTechnologyApiClient
  class ExternalTicketModel
    attr_accessor :barcode

    attr_accessor :external_id

    attr_accessor :allowed_visits

    attr_accessor :given_name

    attr_accessor :family_name

    attr_accessor :email

    attr_accessor :ticket_type_id

    attr_accessor :ticket_type_alias

    attr_accessor :source_name

    attr_accessor :company_name

    attr_accessor :role

    attr_accessor :pre_gift_credits

    attr_accessor :pure_gift_credits

    attr_accessor :normal_gift_credits

    attr_accessor :unit_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'barcode' => :'barcode',
        :'external_id' => :'externalId',
        :'allowed_visits' => :'allowedVisits',
        :'given_name' => :'givenName',
        :'family_name' => :'familyName',
        :'email' => :'email',
        :'ticket_type_id' => :'ticketTypeId',
        :'ticket_type_alias' => :'ticketTypeAlias',
        :'source_name' => :'sourceName',
        :'company_name' => :'companyName',
        :'role' => :'role',
        :'pre_gift_credits' => :'preGiftCredits',
        :'pure_gift_credits' => :'pureGiftCredits',
        :'normal_gift_credits' => :'normalGiftCredits',
        :'unit_id' => :'unitId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'barcode' => :'String',
        :'external_id' => :'String',
        :'allowed_visits' => :'Integer',
        :'given_name' => :'String',
        :'family_name' => :'String',
        :'email' => :'String',
        :'ticket_type_id' => :'String',
        :'ticket_type_alias' => :'String',
        :'source_name' => :'String',
        :'company_name' => :'String',
        :'role' => :'String',
        :'pre_gift_credits' => :'String',
        :'pure_gift_credits' => :'String',
        :'normal_gift_credits' => :'String',
        :'unit_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'barcode')
        self.barcode = attributes[:'barcode']
      end

      if attributes.has_key?(:'externalId')
        self.external_id = attributes[:'externalId']
      end

      if attributes.has_key?(:'allowedVisits')
        self.allowed_visits = attributes[:'allowedVisits']
      end

      if attributes.has_key?(:'givenName')
        self.given_name = attributes[:'givenName']
      end

      if attributes.has_key?(:'familyName')
        self.family_name = attributes[:'familyName']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'ticketTypeId')
        self.ticket_type_id = attributes[:'ticketTypeId']
      end

      if attributes.has_key?(:'ticketTypeAlias')
        self.ticket_type_alias = attributes[:'ticketTypeAlias']
      end

      if attributes.has_key?(:'sourceName')
        self.source_name = attributes[:'sourceName']
      end

      if attributes.has_key?(:'companyName')
        self.company_name = attributes[:'companyName']
      end

      if attributes.has_key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.has_key?(:'preGiftCredits')
        self.pre_gift_credits = attributes[:'preGiftCredits']
      end

      if attributes.has_key?(:'pureGiftCredits')
        self.pure_gift_credits = attributes[:'pureGiftCredits']
      end

      if attributes.has_key?(:'normalGiftCredits')
        self.normal_gift_credits = attributes[:'normalGiftCredits']
      end

      if attributes.has_key?(:'unitId')
        self.unit_id = attributes[:'unitId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @allowed_visits.nil?
        invalid_properties.push('invalid value for "allowed_visits", allowed_visits cannot be nil.')
      end

      if @pre_gift_credits.nil?
        invalid_properties.push('invalid value for "pre_gift_credits", pre_gift_credits cannot be nil.')
      end

      if @pure_gift_credits.nil?
        invalid_properties.push('invalid value for "pure_gift_credits", pure_gift_credits cannot be nil.')
      end

      if @normal_gift_credits.nil?
        invalid_properties.push('invalid value for "normal_gift_credits", normal_gift_credits cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @allowed_visits.nil?
      return false if @pre_gift_credits.nil?
      return false if @pure_gift_credits.nil?
      return false if @normal_gift_credits.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          barcode == o.barcode &&
          external_id == o.external_id &&
          allowed_visits == o.allowed_visits &&
          given_name == o.given_name &&
          family_name == o.family_name &&
          email == o.email &&
          ticket_type_id == o.ticket_type_id &&
          ticket_type_alias == o.ticket_type_alias &&
          source_name == o.source_name &&
          company_name == o.company_name &&
          role == o.role &&
          pre_gift_credits == o.pre_gift_credits &&
          pure_gift_credits == o.pure_gift_credits &&
          normal_gift_credits == o.normal_gift_credits &&
          unit_id == o.unit_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [barcode, external_id, allowed_visits, given_name, family_name, email, ticket_type_id, ticket_type_alias, source_name, company_name, role, pre_gift_credits, pure_gift_credits, normal_gift_credits, unit_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = GlobalEventTechnologyApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
